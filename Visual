#define MAX_BUFFER 200
#define MAX_INTENTOS_READ 4
#define MS_ENTRE_INTENTOS 250
#define SI 1
#define NO 0

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <windows.h>
#include <string.h>
#include <conio.h>
#include "SerialClass/SerialClass.h"

// Funciones prototipo
int menu_principal(void);

void leer_corriente(Serial* Arduino);
void leer_voltaje(Serial* Arduino);
void leer_resistencia(Serial* Arduino);
void fichero1(FILE*, float);
void fichero2(FILE*, float);
void fichero3(FILE*, float);

void Send_to_hw(Serial*, char*);
int Receive_from_hw(Serial* Arduino, char* BufferEntrada);
int Send_and_Receive(Serial* Arduino, const char* msg_out, int valor_out, char* msg_in, float* valor_in);
void monitorizar_aforo(Serial*);

int main(void)
{
	Serial* Arduino;
	char puerto[] = "COM3"; //Puerto serie al que está conectado Arduino
	int opc;  // Opción del menú principal seleccionada

	char mensaje[200];
	int numero_bytes;
	float numero;
	// Tareas de configuración y carga
	//configura();
	Arduino = new Serial((char*)puerto);  // Establece la conexión con Arduino

	// Bucle principal de la aplicación
	do
	{
		opc = menu_principal();
		switch (opc)
		{
		case 1:
			leer_corriente(Arduino);
			break;
		case 2:
			leer_voltaje(Arduino);
			break;

		case 3:
			leer_resistencia(Arduino);
			break;
		case 4:
			printf("se acabaron mediciones\n");
			break;
		}
		printf("\n\n");
	} while (opc != 4);

	// Tareas de desconexión y cierre 
	return 0;
}

int menu_principal(void)
{
	int opcion;
	do
	{
		printf("1 - MEDIR CORRIENTE\n");
		printf("2 - MEDIR VOLTAJE\n");
		printf("3 - MEDIR RESISTENCIA\n");
		printf("4 - CERRAR\n");
		printf("Seleccione opción:");
		scanf_s("%d", &opcion);
		if (opcion < 1 || opcion>3)
			printf("\nOpción inexistente.\n\n");
	} while (opcion < 1 || opcion>3);
	return opcion;
}

int Send_and_Receive(Serial* Arduino, const char* msg_out, int valor_out, char* msg_in, float* valor_in)
{
	char BufferSalida[MAX_BUFFER];
	char BufferEntrada[MAX_BUFFER];
	char* ptr;
	int bytesReceive;

	sprintf_s(BufferSalida, "%s\n%d\n", msg_out, valor_out);
	Send_to_hw(Arduino, BufferSalida);
	bytesReceive = Receive_from_hw(Arduino, BufferEntrada);
	if (bytesReceive != 0)
	{
		ptr = strpbrk(BufferEntrada, " ");
		if (ptr == NULL)
			*valor_in = -1;
		else
		{
			*valor_in = atoi(ptr);
			*ptr = '\0';
		}
		strcpy_s(msg_in, MAX_BUFFER, BufferEntrada);
	}
	return bytesReceive;
}

void Send_to_hw(Serial* Arduino, char* BufferSalida)
{
	Arduino->WriteData(BufferSalida, strlen(BufferSalida));
}

int Receive_from_hw(Serial* Arduino, char* BufferEntrada)
{
	int bytesRecibidos, bytesTotales = 0;
	int intentos_lectura = 0;
	char cadena[MAX_BUFFER];

	BufferEntrada[0] = '\0';
	while (intentos_lectura < MAX_INTENTOS_READ)
	{
		cadena[0] = '\0';
		bytesRecibidos = Arduino->ReadData(cadena, sizeof(char) * (MAX_BUFFER - 1));
		if (bytesRecibidos != -1)
		{
			cadena[bytesRecibidos] = '\0';
			strcat_s(BufferEntrada, MAX_BUFFER, cadena);
			bytesTotales += bytesRecibidos;
		}
		intentos_lectura++;
		Sleep(MS_ENTRE_INTENTOS);
	}
	return bytesTotales;
}

void leer_corriente(Serial* Arduino)
{
	int bytesrecibidos;
	float corriente;
	char BufferEntrada[MAX_BUFFER];
	FILE* f;

	if (Arduino->IsConnected()) // Si hay conexión con Arduino 
	{
		bytesrecibidos = Send_and_Receive(Arduino, "CORRIENTE", -1, BufferEntrada, &corriente);
		if (bytesrecibidos == 0)
			printf("No se ha recibido respuesta al mensaje enviado\n");
		else
		{
			printf("Mensaje recibido %s %d\n", BufferEntrada, corriente);
			fichero3(f, corriente);
		}
			
	}
	else
		printf("La comunicación con la plataforma hardware no es posible en este momento\n");
}

void leer_voltaje(Serial* Arduino)
{
	int bytesrecibidos;
	float voltaje;
	char BufferEntrada[MAX_BUFFER];
	FILE* f;

	if (Arduino->IsConnected()) // Si hay conexión con Arduino 
	{
		bytesrecibidos = Send_and_Receive(Arduino, "VOLTAJE", -1, BufferEntrada, &voltaje);
		if (bytesrecibidos == 0)
			printf("No se ha recibido respuesta al mensaje enviado\n");
		else
		{
			printf("Mensaje recibido %s %d\n", BufferEntrada, voltaje);
			fichero1(f, voltaje);
		}
			
	}
	else
		printf("La comunicación con la plataforma hardware no es posible en este momento\n");
}

void leer_resistencia(Serial* Arduino)
{
	int bytesrecibidos;
	float resistencia;
	char BufferEntrada[MAX_BUFFER];
	FILE* f;

	if (Arduino->IsConnected()) // Si hay conexión con Arduino 
	{
		bytesrecibidos = Send_and_Receive(Arduino, "RESISTENCIA", -1, BufferEntrada, &resistencia);
		if (bytesrecibidos == 0)
			printf("No se ha recibido respuesta al mensaje enviado\n");
		else
		{
			printf("Mensaje recibido %s %d\n", BufferEntrada, resistencia);
			fichero2(f, resistencia);
		}
			
	}
	else
		printf("La comunicación con la plataforma hardware no es posible en este momento\n");
}

void fichero1(FILE* f, float voltaje)
{
	errno_t err;

	err = fopen_s(&f, "resultados1.txt", "a+");
	if (err == 0)
		printf("El archivo esta abierto\n");
	else
		printf("El archivo NO esta abierto\n");

	fprintf(f, "VOLTAJE: %f", voltaje);

	if (fclose(f) == NULL)
		printf("\n Archivo cerrado correctamente");
	else
		printf("\n Error en el cierre del archivo");
}

void fichero2(FILE* f, float resistencia)
{
	errno_t err;

	err = fopen_s(&f, "resultados2.txt", "a+");
	if (err == 0)
		printf("El archivo esta abierto\n");
	else
		printf("El archivo NO esta abierto\n");

	fprintf(f, "RESISTENCIA: %f", resistencia);

	if (fclose(f) == NULL)
		printf("\n Archivo cerrado correctamente");
	else
		printf("\n Error en el cierre del archivo");
}

void fichero3(FILE* f, float corriente)
{
	errno_t err;

	err = fopen_s(&f, "resultados3.txt", "a+");
	if (err == 0)
		printf("El archivo esta abierto\n");
	else
		printf("El archivo NO esta abierto\n");

	fprintf(f, "CORRIENTE: %f\n", corriente);

	if (fclose(f) == NULL)
		printf("\n Archivo cerrado correctamente");
	else
		printf("\n Error en el cierre del archivo");
}
